#!/usr/bin/env python3
"""
Script para limpiar completamente la base de datos SGA
Elimina todos los datos de todas las tablas
"""

import os
import sys

# Agregar el directorio ra√≠z al path para importar sga
script_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.dirname(script_dir)
sys.path.insert(0, root_dir)

from sga.db.database import get_connection, DATABASE_PATH

def limpiar_base_datos():
    """Elimina todos los datos de todas las tablas"""
    
    # Verificar que existe la base de datos
    if not os.path.exists(DATABASE_PATH):
        print(f"‚ùå No se encontr√≥ la base de datos en: {DATABASE_PATH}")
        return False
    
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # Lista de todas las tablas en orden de dependencias (las que tienen FK al final)
        tablas = [
            'notas_finales',
            'notas', 
            'inscripciones',
            'instancias_topico',
            'evaluaciones',
            'secciones',
            'instancias_curso',
            'topicos',
            'alumnos',
            'profesores',
            'cursos'
        ]
        
        print("üßπ Iniciando limpieza de la base de datos...")
        
        # Desactivar restricciones de claves for√°neas temporalmente
        cursor.execute('PRAGMA foreign_keys = OFF')
        
        # Eliminar datos de cada tabla
        for tabla in tablas:
            try:
                cursor.execute(f'DELETE FROM {tabla}')
                filas_eliminadas = cursor.rowcount
                print(f"‚úÖ Tabla '{tabla}': {filas_eliminadas} registros eliminados")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error al limpiar tabla '{tabla}': {e}")
        
        # Resetear los autoincrement
        cursor.execute("DELETE FROM sqlite_sequence")
        print("‚úÖ Contadores de ID reseteados")
        
        # Reactivar restricciones de claves for√°neas
        cursor.execute('PRAGMA foreign_keys = ON')
        
        conn.commit()
        conn.close()
        
        print("\nüéâ ¬°Base de datos limpiada exitosamente!")
        print("üìä Todas las tablas est√°n ahora vac√≠as")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la limpieza: {e}")
        return False

def confirmar_limpieza():
    """Solicita confirmaci√≥n antes de proceder"""
    print("‚ö†Ô∏è  ADVERTENCIA: Esta acci√≥n eliminar√° TODOS los datos de la base de datos")
    print("üìù Se eliminar√°n:")
    print("   ‚Ä¢ Todos los profesores")
    print("   ‚Ä¢ Todos los alumnos") 
    print("   ‚Ä¢ Todos los cursos")
    print("   ‚Ä¢ Todas las instancias, secciones y evaluaciones")
    print("   ‚Ä¢ Todas las notas e inscripciones")
    print("   ‚Ä¢ Todos los t√≥picos")
    print()
    
    respuesta = input("¬øEst√°s seguro de que quieres continuar? (escribe 'CONFIRMAR' para proceder): ")
    
    return respuesta.strip().upper() == 'CONFIRMAR'

if __name__ == "__main__":
    print("=" * 60)
    print("üóëÔ∏è  LIMPIEZA COMPLETA DE BASE DE DATOS SGA")
    print("=" * 60)
    
    if confirmar_limpieza():
        if limpiar_base_datos():
            print("\n‚ú® ¬°Limpieza completada! La base de datos est√° lista para usar.")
        else:
            print("\n‚ùå La limpieza fall√≥. Revisa los errores anteriores.")
    else:
        print("\nüö´ Limpieza cancelada por el usuario.")
